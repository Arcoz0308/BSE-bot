// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id
  userXP      GuildMember[]
  bumps       Bump[]
  username    String
  avatar      String?
  displayName String

  @@map("users")
}

model GuildMember {
  displayName String?
  avatar      String?
  userId      String
  guildId     String
  guild       Guild   @relation(fields: [guildId], references: [id])
  user        User    @relation(fields: [userId], references: [id])
  xp          Int

  @@id([guildId, userId])
  @@map("guildMembers")
}

model Guild {
  id                   String        @id
  name                 String        @default("null")
  guildMembers         GuildMember[]
  xpMovements          XpMovement[]
  bumps                Bump[]
  lastPubMessage       DateTime?
  messagesSinceLastPub Int           @default(0)

  @@map("guilds")
}

model Bump {
  userId  String
  guildId String
  guild   Guild    @relation(fields: [guildId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  date    DateTime @default(now())
  type    BumpType @default(DISBOARD_BUMP)
  xp      Int      @default(100)

  @@id([guildId, userId, date])
  @@map("bumps")
}

model XpMovement {
  id        Int             @id @default(autoincrement())
  xpAmount  Int
  finalXp   Int
  byUserId  String
  forUserId String
  date      DateTime        @default(now())
  cause     XpMovementCause
  guildId   String
  guild     Guild           @relation(fields: [guildId], references: [id])
  reason    String

  @@map("xpMovements")
}

enum XpMovementCause {
  XPDROP
  ADMINXP
  XPIMPORT
  PRIME
  REVERSE
  OTHER
}

enum BumpType {
  DISBOARD_BUMP
  DTOP_BUMP
  DTOP_BOOST
}

model BSClubInfo {
  tag        String            @id
  name       String
  type       BSClubType
  globalTop  Boolean           @default(false)
  localTop   Boolean           @default(false)
  enable     Boolean           @default(true)
  bestGlobal Int?
  bestLocal  Int?
  minTr      Int
  staffs     BSClubStaff[]
  index      Int               @unique @default(autoincrement())
  members    BSClubMember[]
  dailyInfos BSClubDailyInfo[]

  @@map("clubInfos")
}

model BSClubStaff {
  clubTag  String
  username String
  userId   String
  role     BSClubStaffRole
  club     BSClubInfo      @relation(fields: [clubTag], references: [tag])

  @@id([clubTag, userId])
  @@map("clubStaffs")
}

enum BSClubType {
  LADDER
  LDC
  CHILL
}

enum BSClubStaffRole {
  VICE_PRESIDENT
  PRESIDENT
}

model BSClubMember {
  tag               String                     @id
  username          String
  role              BSClubRole
  clubTag           String?
  club              BSClubInfo?                @relation(fields: [clubTag], references: [tag])
  dailyInfos        BSClubMemberDailyInfo[]
  modificationsLogs BSClubMemberModification[]

  @@map("clubMembers")
}

model BSClubDailyInfo {
  id        Int        @id @default(autoincrement())
  date      DateTime
  tag       String
  club      BSClubInfo @relation(fields: [tag], references: [tag])
  members   Int
  totalTr   Int
  globalTop Int?
  localTop  Int?

  @@map("clubDailyInfos")
}

model BSClubMemberDailyInfo {
  id         Int          @id @default(autoincrement())
  date       DateTime
  tag        String
  member     BSClubMember @relation(fields: [tag], references: [tag])
  currentTr  Int
  curentClub String

  @@map("clubMemberDailyInfos")
}

model BSClubMemberModification {
  id          Int          @id @default(autoincrement())
  date        DateTime
  tag         String
  member      BSClubMember @relation(fields: [tag], references: [tag])
  oldClub     String?
  newClub     String?
  oldRole     BSClubRole?
  newRole     BSClubRole?
  oldUsername String?
  newUsername String?

  @@map("clubMemberModifications")
}

enum BSClubRole {
  NOT_MEMBER
  MEMBER
  SENIOR
  VICE_PRESIDENT
  PRESIDENT
  UNKNOWN
}

model Config {
  service String @id
  value   String

  @@map("configs")
}
